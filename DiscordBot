import discord
import asyncio
import requests
from discord.ext import tasks, commands
from dotenv import load_dotenv
import os
import subprocess
import sys

# Load environment variables
env_path = r"C:/Users/gstan/Desktop/Bots/YetiHunter.env"
load_dotenv(env_path)

# Bot credentials and settings
TOKEN = os.getenv("DISCORD_TOKEN")
GUILD_ID = int(os.getenv("GUILD_ID"))
CHANNEL_ID = int(os.getenv("CHANNEL_ID"))
YOUTUBE_CHANNEL_ID = os.getenv("YOUTUBE_CHANNEL_ID")
YOUTUBE_CHANNEL_NOTIFICATION_ID = int(os.getenv("YOUTUBE_CHANNEL_NOTIFICATION_ID"))
ROLE_ID = int(os.getenv("ROLE_ID"))
TWITCH_USERNAME = os.getenv("TWITCH_USERNAME")
TWITCH_CLIENT_ID = os.getenv("TWITCH_CLIENT_ID")
TWITCH_CLIENT_SECRET = os.getenv("TWITCH_CLIENT_SECRET")
TWITCH_ACCESS_TOKEN = os.getenv("TWITCH_ACCESS_TOKEN")
YOUTUBE_API_KEYS = os.getenv("YOUTUBE_API_KEYS").split(",")
TWITCH_API_URL = f"https://api.twitch.tv/helix/streams?user_login={TWITCH_USERNAME}"
current_youtube_key_index = 0

intents = discord.Intents.default()
intents.message_content = True
intents.guilds = True

client = commands.Bot(command_prefix="!", intents=intents)
last_status = False
message_id = None
last_video_id = os.getenv("LAST_YOUTUBE_VIDEO_ID")

# === Utility Functions ===

def update_env_variable(key, value, env_path=env_path):
    lines, found = [], False
    with open(env_path, "r") as f:
        for line in f:
            if line.startswith(f"{key}="):
                lines.append(f"{key}={value}\n")
                found = True
            else:
                lines.append(line)
    if not found:
        lines.append(f"{key}={value}\n")
    with open(env_path, "w") as f:
        f.writelines(lines)

def refresh_twitch_token():
    url = "https://id.twitch.tv/oauth2/token"
    params = {
        "client_id": TWITCH_CLIENT_ID,
        "client_secret": TWITCH_CLIENT_SECRET,
        "grant_type": "client_credentials"
    }
    response = requests.post(url, params=params)
    if response.status_code == 200:
        new_token = response.json()["access_token"]
        update_env_variable("TWITCH_ACCESS_TOKEN", new_token)
        return new_token
    return None

def check_twitch_status():
    global TWITCH_ACCESS_TOKEN
    headers = {
        "Client-ID": TWITCH_CLIENT_ID,
        "Authorization": f"Bearer {TWITCH_ACCESS_TOKEN}"
    }
    response = requests.get(TWITCH_API_URL, headers=headers)
    if response.status_code == 401:
        new_token = refresh_twitch_token()
        if not new_token:
            return False, None, None
        TWITCH_ACCESS_TOKEN = new_token
        headers["Authorization"] = f"Bearer {TWITCH_ACCESS_TOKEN}"
        response = requests.get(TWITCH_API_URL, headers=headers)

    if response.status_code == 200:
        data = response.json()
        if data.get("data"):
            stream = data["data"][0]
            return True, stream.get("game_name"), stream.get("title")
    return False, None, None

def get_youtube_api_url():
    key = YOUTUBE_API_KEYS[current_youtube_key_index]
    return f"https://www.googleapis.com/youtube/v3/search?part=snippet&channelId={YOUTUBE_CHANNEL_ID}&order=date&maxResults=1&key={key}"

async def notify_youtube_api_failure():
    guild = client.get_guild(GUILD_ID)
    channel = guild.get_channel(YOUTUBE_CHANNEL_NOTIFICATION_ID)
    role = guild.get_role(ROLE_ID)
    if channel:
        await channel.send(f"{role.mention if role else ''} ‚ö†Ô∏è All YouTube API keys failed. Please update them.")

async def check_youtube_video():
    global current_youtube_key_index, last_video_id
    for _ in YOUTUBE_API_KEYS:
        url = get_youtube_api_url()
        response = requests.get(url)
        if response.status_code == 200:
            items = response.json().get("items", [])
            if not items:
                return None, None
            video = items[0]
            video_id = video['id'].get('videoId')
            if video_id == last_video_id:
                return None, None
            last_video_id = video_id
            update_env_variable("LAST_YOUTUBE_VIDEO_ID", last_video_id)
            return video["snippet"]["title"], f"https://www.youtube.com/watch?v={video_id}"
        elif response.status_code in [403, 400]:
            current_youtube_key_index = (current_youtube_key_index + 1) % len(YOUTUBE_API_KEYS)
        else:
            break
    await notify_youtube_api_failure()
    return None, None

async def send_live_notification(channel, role, game, title):
    return await channel.send(f"{role.mention} Knuckleykong is now LIVE on Twitch! Playing {game} - {title}\nhttps://www.twitch.tv/{TWITCH_USERNAME}")

async def delete_notification(channel, msg_id):
    try:
        message = await channel.fetch_message(msg_id)
        await message.delete()
    except Exception as e:
        print(f"Failed to delete message: {e}")

# === Background Tasks ===

@tasks.loop(seconds=15)
async def check_stream_status():
    global last_status, message_id
    is_live, game, title = check_twitch_status()
    guild = client.get_guild(GUILD_ID)
    channel = guild.get_channel(CHANNEL_ID)
    role = guild.get_role(ROLE_ID)

    if is_live and not last_status:
        # Send live notification
        msg = await send_live_notification(channel, role, game, title)
        message_id = msg.id
        print(f"‚úÖ Live notification sent: Knuckleykong is now LIVE! Playing {game} - {title}")
    elif not is_live and last_status and message_id:
        # Delete live notification
        await delete_notification(channel, message_id)
        print(f"‚úÖ Live notification deleted: Knuckleykong has gone offline.")
        message_id = None

    last_status = is_live

@tasks.loop(minutes=720)
async def check_youtube_video_task():
    video_title, video_url = await check_youtube_video()
    if video_title and video_url:
        guild = client.get_guild(GUILD_ID)
        channel = guild.get_channel(YOUTUBE_CHANNEL_NOTIFICATION_ID)
        role = guild.get_role(ROLE_ID)
        if channel:
            await channel.send(f"{role.mention} Latest Yeti Report: {video_title} - {video_url}")

# === Bot Events & Slash Commands ===

@client.event
async def on_ready():
    print(f'Logged in as {client.user}')
    guild = discord.Object(id=GUILD_ID)

    try:
        # Clean and sync both on startup
        await client.tree.sync(guild=guild)
        await client.tree.sync()
        print("‚úÖ Commands synced on startup.")
    except Exception as e:
        print(f"‚ùå Error syncing on startup: {e}")

    last_video_id = os.getenv("LAST_YOUTUBE_VIDEO_ID")

    if last_video_id:
        guild = client.get_guild(GUILD_ID)
        if guild:
            channel = guild.get_channel(YOUTUBE_CHANNEL_NOTIFICATION_ID)
            if channel:
                async for message in channel.history(limit=1):
                    if last_video_id in message.content:
                        print(f"‚úÖ Last video with ID {last_video_id} has already been posted.")
                    else:
                        print(f"‚ùå Last video with ID {last_video_id} has not been posted yet.")
            else:
                print("‚ùå Channel not found.")
        else:
            print("‚ùå Guild not found.")
    else:
        print("‚ùå No last YouTube video ID found in the environment.")

    # ‚úÖ Safely start background tasks
    if not check_stream_status.is_running():
        check_stream_status.start()
    if not check_youtube_video_task.is_running():
        check_youtube_video_task.start()




@client.tree.command(name="ping", description="Check bot latency")
async def ping(interaction: discord.Interaction):
    latency = client.latency * 1000
    await interaction.response.send_message(f"Pong! üèì Latency: {latency:.2f}ms")

@client.tree.command(name="status", description="Check Twitch live status")
async def status(interaction: discord.Interaction):
    status_msg = "üî¥ Live" if last_status else "‚ö™ Offline"
    await interaction.response.send_message(f"Knuckleykong is currently: {status_msg}")

@client.tree.command(name="restart", description="Restart the bot")
async def restart(interaction: discord.Interaction):
    await interaction.response.send_message("‚ôªÔ∏è Restarting bot...")
    subprocess.Popen([sys.executable, __file__])
    await client.close()

@client.tree.command(name="sync", description="Manually sync slash commands")
async def sync(interaction: discord.Interaction):
    guild = client.get_guild(GUILD_ID)
    if guild:
        await client.tree.clear_commands(guild=guild)
        await client.tree.sync(guild=guild)
        await interaction.response.send_message("‚úÖ Slash commands synced!")
    else:
        await interaction.response.send_message("‚ùå Guild not found.")

import asyncio

import asyncio

@client.tree.command(name="clean", description="Remove stale global slash commands", guild=discord.Object(id=int(GUILD_ID)))
async def clean(interaction: discord.Interaction):
    if not interaction.user.guild_permissions.administrator:
        await interaction.response.send_message("‚ùå You don't have permission to use this.", ephemeral=True)
        return

    # Send a temporary response to acknowledge the clean process started
    await interaction.response.send_message("üßπ Cleaning up stale global commands. Please wait...")

    # Fetch all global commands from Discord
    global_commands = await client.tree.fetch_commands()
    print(f"Global commands from Discord: {[cmd.name for cmd in global_commands]}")

    # Get the names of the commands currently defined in the code
    current_commands = [cmd.name for cmd in client.tree.get_commands()]
    print(f"Commands defined in the code: {current_commands}")

    # Loop through the existing global commands and delete ones no longer defined in the code
    deleted_commands = []
    errors = []
    
    for cmd in global_commands:
        if cmd.name not in current_commands:
            try:
                # Delete the command that no longer exists in the code
                await client.http.delete_global_application_command(client.user.id, cmd.id)
                deleted_commands.append(cmd.name)
                print(f"‚úÖ Deleted command `{cmd.name}`.")
            except Exception as e:
                print(f"Error while deleting command {cmd.name}: {e}")
                errors.append(f"‚ùå Error deleting `{cmd.name}`: {str(e)}")
            
            # Optional: Add a small delay between deletions to avoid rate limits
            await asyncio.sleep(1)

    # After the loop, respond with the results
    if deleted_commands:
        await interaction.followup.send(f"‚úÖ Successfully deleted the following commands: {', '.join(deleted_commands)}", ephemeral=True)
    else:
        await interaction.followup.send("‚úÖ No stale commands found to delete.", ephemeral=True)
    
    if errors:
        await interaction.followup.send("\n".join(errors), ephemeral=True)


# === Run Bot ===
client.run(TOKEN)

import discord
import asyncio
import requests
from discord.ext import tasks, commands
from dotenv import load_dotenv
import os
import subprocess
import sys
import ctypes
import json

# Admin check and elevation (Windows only)
def is_admin():
    try:
        return ctypes.windll.shell32.IsUserAnAdmin()
    except:
        return False

if not is_admin():
    print("🔒 Not running as admin. Attempting to restart with admin rights...")
    ctypes.windll.shell32.ShellExecuteW(
        None, "runas", sys.executable, ' '.join(sys.argv), None, 1)
    sys.exit()

# Load environment variables
env_path = r"C:/Users/gstan/Desktop/Bots/YetiHunter.env"
load_dotenv(env_path)

# Bot credentials and settings
TOKEN = os.getenv("DISCORD_TOKEN")
GUILD_ID = int(os.getenv("GUILD_ID"))
CHANNEL_ID = int(os.getenv("CHANNEL_ID"))
YOUTUBE_CHANNEL_ID = os.getenv("YOUTUBE_CHANNEL_ID")
YOUTUBE_CHANNEL_NOTIFICATION_ID = int(os.getenv("YOUTUBE_CHANNEL_NOTIFICATION_ID"))
ROLE_ID = int(os.getenv("ROLE_ID"))
TWITCH_USERNAME = os.getenv("TWITCH_USERNAME")
TWITCH_CLIENT_ID = os.getenv("TWITCH_CLIENT_ID")
TWITCH_CLIENT_SECRET = os.getenv("TWITCH_CLIENT_SECRET")
TWITCH_ACCESS_TOKEN = os.getenv("TWITCH_ACCESS_TOKEN")
YOUTUBE_API_KEYS = os.getenv("YOUTUBE_API_KEYS").split(",")
TWITCH_API_URL = f"https://api.twitch.tv/helix/streams?user_login={TWITCH_USERNAME}"
current_youtube_key_index = 0
VOD_LOG_PATH = r"C:/Users/gstan/Desktop/Bots/posted_vods.json"  # Change this to where you want the file


intents = discord.Intents.default()
intents.message_content = True
intents.guilds = True

client = commands.Bot(command_prefix="!", intents=intents)
last_status = False
message_id = None
last_video_id = os.getenv("LAST_YOUTUBE_VIDEO_ID")

# === Utility Functions ===

def update_env_variable(key, value, env_path=env_path):
    lines, found = False, False
    with open(env_path, "r") as f:
        for line in f:
            if line.startswith(f"{key}="):
                lines.append(f"{key}={value}\n")
                found = True
            else:
                lines.append(line)
    if not found:
        lines.append(f"{key}={value}\n")
    with open(env_path, "w") as f:
        f.writelines(lines)

def refresh_twitch_token():
    url = "https://id.twitch.tv/oauth2/token"
    params = {
        "client_id": TWITCH_CLIENT_ID,
        "client_secret": TWITCH_CLIENT_SECRET,
        "grant_type": "client_credentials"
    }
    response = requests.post(url, params=params)
    if response.status_code == 200:
        new_token = response.json()["access_token"]
        update_env_variable("TWITCH_ACCESS_TOKEN", new_token)
        return new_token
    return None

def check_twitch_status():
    global TWITCH_ACCESS_TOKEN
    headers = {
        "Client-ID": TWITCH_CLIENT_ID,
        "Authorization": f"Bearer {TWITCH_ACCESS_TOKEN}"
    }
    response = requests.get(TWITCH_API_URL, headers=headers)
    if response.status_code == 401:
        new_token = refresh_twitch_token()
        if not new_token:
            return False, None, None
        TWITCH_ACCESS_TOKEN = new_token
        headers["Authorization"] = f"Bearer {TWITCH_ACCESS_TOKEN}"
        response = requests.get(TWITCH_API_URL, headers=headers)

    if response.status_code == 200:
        data = response.json()
        if data.get("data"):
            stream = data["data"][0]
            return True, stream.get("game_name"), stream.get("title")
    return False, None, None

def get_youtube_api_url():
    key = YOUTUBE_API_KEYS[current_youtube_key_index]
    return (
        f"https://www.googleapis.com/youtube/v3/search"
        f"?part=snippet"
        f"&channelId={YOUTUBE_CHANNEL_ID}"
        f"&order=date"
        f"&maxResults=5"
        f"&type=video"  # <--- this is the fix
        f"&key={key}"
    )


# === Utility Functions ===

# === Utility Functions ===

def save_posted_vods(vod_ids):
    try:
        print(f"🔒 Attempting to save VODs to {VOD_LOG_PATH}...")
        # Check if the list of VODs has any content
        if not vod_ids:
            print("⚠️ No VODs to save.")
            return
        
        with open(VOD_LOG_PATH, "w") as f:
            json.dump(vod_ids, f)
        print(f"✅ Successfully saved VODs to {VOD_LOG_PATH}")
    except PermissionError as e:
        print(f"❌ Permission error: {e}")
    except Exception as e:
        print(f"❌ Unexpected error saving VODs: {e}")

async def refresh_vod_list():
    posted_vods = []
    try:
        with open(VOD_LOG_PATH, "r") as f:
            # Try to load the JSON file
            posted_vods = json.load(f)
            print(f"✅ Loaded VODs from file: {posted_vods}")  # Debugging line
    except FileNotFoundError:
        print("⚠️ No VOD log found. Creating a new one.")
        save_posted_vods(posted_vods)  # Ensure an empty VOD file is created
    except json.JSONDecodeError:
        print("⚠️ VOD log file is corrupted. Creating a new one.")
        save_posted_vods(posted_vods)  # Reset the VOD file to empty
    except Exception as e:
        print(f"❌ Error refreshing VOD list from file: {e}")
    
    print(f"✅ Current posted VODs: {posted_vods}")  # Debugging line
    return posted_vods

async def check_youtube_video():
    global current_youtube_key_index, last_video_id
    posted_vods = await refresh_vod_list()
    new_vods = []

    for _ in range(len(YOUTUBE_API_KEYS)):
        url = get_youtube_api_url()
        response = requests.get(url)
        print(f"🌐 Requesting YouTube API with URL:\n{url}")

        if response.status_code == 200:
            data = response.json()
            print("📦 Raw YouTube API response:")
            print(json.dumps(data, indent=2))

            items = data.get("items", [])
            if not items:
                print("⚠️ No items found in YouTube API response.")
                return [], None

            for video in items:
                # Skip non-video results
                kind = video["id"].get("kind")
                if kind != "youtube#video":
                    print(f"⚠️ Skipping non-video item: {kind}")
                    continue

                video_id = video["id"].get("videoId")
                video_title = video["snippet"].get("title")

                if not video_id or not video_title:
                    print(f"⚠️ Missing video ID or title: {video}")
                    continue

                print(f"🔎 Found video: {video_id} - {video_title}")
                print(f"👉 last_video_id: {last_video_id}")
                print(f"👉 Already posted? {video_id in posted_vods}")

                if video_id in posted_vods:
                    print(f"⏩ Already in posted_vods: {video_id}")
                    continue

                if video_id == last_video_id:
                    print(f"⏩ Same as last_video_id: {video_id}")
                    continue

                # If it passes, consider it a new VOD
                print(f"✅ New VOD detected: {video_id} - {video_title}")
                new_vods.append({
                    'title': video_title,
                    'url': f"https://www.youtube.com/watch?v={video_id}"
                })

                posted_vods.append(video_id)
                last_video_id = video_id

            save_posted_vods(posted_vods)

            if new_vods:
                return new_vods

        elif response.status_code in [403, 400]:
            print(f"🔁 API key failed. Rotating key... ({response.status_code})")
            current_youtube_key_index = (current_youtube_key_index + 1) % len(YOUTUBE_API_KEYS)
        else:
            print(f"❌ Unexpected response: {response.status_code} - {response.text}")
            break

    return [], None


# === Background Tasks ===

@tasks.loop(minutes=720)
async def check_youtube_video_task():
    new_vods = await check_youtube_video()

    # Ensure new_vods is a list and not None
    if isinstance(new_vods, list) and new_vods:
        guild = client.get_guild(GUILD_ID)
        channel = guild.get_channel(YOUTUBE_CHANNEL_NOTIFICATION_ID)
        role = guild.get_role(ROLE_ID)

        if channel:
            for vod in new_vods:
                if vod and isinstance(vod, dict) and vod.get('title') and vod.get('url'):
                    await channel.send(f"{role.mention} New VOD: {vod['title']} - {vod['url']}")
                else:
                    print("❌ Invalid VOD data, skipping post.")
    else:
        print("❌ No new VODs found.")

# === Bot Events & Slash Commands ===

@client.event
async def on_ready():
    print(f'Logged in as {client.user}')
    guild = discord.Object(id=GUILD_ID)

    try:
        await client.tree.sync(guild=guild)
        await client.tree.sync()
        print("✅ Commands synced on startup.")
    except Exception as e:
        print(f"❌ Error syncing on startup: {e}")

    # ✅ Start background tasks
    if not check_youtube_video_task.is_running():
        check_youtube_video_task.start()

@client.tree.command(name="ping", description="Check bot latency")
async def ping(interaction: discord.Interaction):
    latency = client.latency * 1000
    await interaction.response.send_message(f"Pong! 🏓 Latency: {latency:.2f}ms")

@client.tree.command(name="status", description="Check Twitch live status")
async def status(interaction: discord.Interaction):
    status_msg = "🔴 Live" if last_status else "⚪ Offline"
    await interaction.response.send_message(f"Knuckleykong is currently: {status_msg}")

@client.tree.command(name="restart", description="Restart the bot")
async def restart(interaction: discord.Interaction):
    await interaction.response.send_message("♻️ Restarting bot...")
    subprocess.Popen([sys.executable, __file__])
    await client.close()

# === Run Bot ===
client.run(TOKEN)

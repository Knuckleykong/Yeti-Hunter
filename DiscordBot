import discord
import asyncio
import requests
from discord.ext import tasks, commands
from dotenv import load_dotenv
import os
import subprocess
import sys
import ctypes
import json

# Admin check and elevation (Windows only)
def is_admin():
    try:
        return ctypes.windll.shell32.IsUserAnAdmin()
    except:
        return False

if not is_admin():
    print("\U0001f512 Not running as admin. Attempting to restart with admin rights...")
    ctypes.windll.shell32.ShellExecuteW(
        None, "runas", sys.executable, ' '.join(sys.argv), None, 1)
    sys.exit()

# Load environment variables
env_path = r"path to .env"
load_dotenv(env_path)

# Bot credentials and settings
TOKEN = os.getenv("DISCORD_TOKEN")
GUILD_ID = int(os.getenv("GUILD_ID"))
CHANNEL_ID = int(os.getenv("CHANNEL_ID"))
YOUTUBE_CHANNEL_ID = os.getenv("YOUTUBE_CHANNEL_ID")
YOUTUBE_CHANNEL_NOTIFICATION_ID = int(os.getenv("YOUTUBE_CHANNEL_NOTIFICATION_ID"))
ROLE_ID = int(os.getenv("ROLE_ID"))
TWITCH_USERNAME = os.getenv("TWITCH_USERNAME")
TWITCH_CLIENT_ID = os.getenv("TWITCH_CLIENT_ID")
TWITCH_CLIENT_SECRET = os.getenv("TWITCH_CLIENT_SECRET")
TWITCH_ACCESS_TOKEN = os.getenv("TWITCH_ACCESS_TOKEN")
YOUTUBE_API_KEYS = os.getenv("YOUTUBE_API_KEYS").split(",")
TWITCH_API_URL = f"https://api.twitch.tv/helix/streams?user_login={TWITCH_USERNAME}"
current_youtube_key_index = 0
VOD_LOG_PATH = r"path to .json"
LIVE_MESSAGE_LOG = "live_message.json"

intents = discord.Intents.default()
intents.message_content = True
intents.guilds = True

client = commands.Bot(command_prefix="!", intents=intents)
last_status = False
message_id = None
last_video_id = os.getenv("LAST_YOUTUBE_VIDEO_ID")

# === Utility Functions ===

def update_env_variable(key, value, env_path=env_path):
    lines = []
    found = False
    with open(env_path, "r") as f:
        for line in f:
            if line.startswith(f"{key}="):
                lines.append(f"{key}={value}\n")
                found = True
            else:
                lines.append(line)
    if not found:
        lines.append(f"{key}={value}\n")
    with open(env_path, "w") as f:
        f.writelines(lines)

def refresh_twitch_token():
    url = "https://id.twitch.tv/oauth2/token"
    params = {
        "client_id": TWITCH_CLIENT_ID,
        "client_secret": TWITCH_CLIENT_SECRET,
        "grant_type": "client_credentials"
    }
    response = requests.post(url, params=params)
    if response.status_code == 200:
        new_token = response.json()["access_token"]
        update_env_variable("TWITCH_ACCESS_TOKEN", new_token)
        return new_token
    return None

def check_twitch_status():
    global TWITCH_ACCESS_TOKEN
    headers = {
        "Client-ID": TWITCH_CLIENT_ID,
        "Authorization": f"Bearer {TWITCH_ACCESS_TOKEN}"
    }
    response = requests.get(TWITCH_API_URL, headers=headers)
    if response.status_code == 401:
        new_token = refresh_twitch_token()
        if not new_token:
            return False, None, None
        TWITCH_ACCESS_TOKEN = new_token
        headers["Authorization"] = f"Bearer {TWITCH_ACCESS_TOKEN}"
        response = requests.get(TWITCH_API_URL, headers=headers)

    if response.status_code == 200:
        data = response.json()
        if data.get("data"):
            stream = data["data"][0]
            return True, stream.get("game_name"), stream.get("title")
    return False, None, None

def get_youtube_api_url():
    key = YOUTUBE_API_KEYS[current_youtube_key_index]
    return (
        f"https://www.googleapis.com/youtube/v3/search"
        f"?part=snippet"
        f"&channelId={YOUTUBE_CHANNEL_ID}"
        f"&order=date"
        f"&maxResults=5"
        f"&type=video"
        f"&key={key}"
    )

def save_posted_vods(vod_ids):
    try:
        if not vod_ids:
            print("‚ö†Ô∏è No VODs to save.")
            return
        with open(VOD_LOG_PATH, "w") as f:
            json.dump(vod_ids, f)
        print(f"‚úÖ Successfully saved VODs to {VOD_LOG_PATH}")
    except Exception as e:
        print(f"‚ùå Error saving VODs: {e}")

def save_live_message_id(msg_id):
    try:
        with open(LIVE_MESSAGE_LOG, "w") as f:
            json.dump({"message_id": msg_id}, f)
    except Exception as e:
        print(f"‚ùå Error saving live message ID: {e}")

def load_live_message_id():
    if not os.path.exists(LIVE_MESSAGE_LOG):
        return None
    try:
        with open(LIVE_MESSAGE_LOG, "r") as f:
            data = json.load(f)
            return data.get("message_id")
    except Exception as e:
        print(f"‚ùå Error loading live message ID: {e}")
        return None

async def refresh_vod_list():
    posted_vods = []
    try:
        with open(VOD_LOG_PATH, "r") as f:
            posted_vods = json.load(f)
    except FileNotFoundError:
        print("‚ö†Ô∏è No VOD log found. Creating a new one.")
        save_posted_vods(posted_vods)
    except json.JSONDecodeError:
        print("‚ö†Ô∏è VOD log file is corrupted. Creating a new one.")
        save_posted_vods(posted_vods)
    return posted_vods

async def check_youtube_video():
    global current_youtube_key_index, last_video_id
    posted_vods = await refresh_vod_list()
    new_vods = []

    for _ in range(len(YOUTUBE_API_KEYS)):
        url = get_youtube_api_url()
        response = requests.get(url)
        if response.status_code == 200:
            data = response.json()
            items = data.get("items", [])
            if not items:
                return [], None
            for video in items:
                if video["id"].get("kind") != "youtube#video":
                    continue
                video_id = video["id"].get("videoId")
                video_title = video["snippet"].get("title")
                if not video_id or not video_title:
                    continue
                if video_id in posted_vods or video_id == last_video_id:
                    continue
                new_vods.append({
                    'title': video_title,
                    'url': f"https://www.youtube.com/watch?v={video_id}"
                })
                posted_vods.append(video_id)
                last_video_id = video_id
            save_posted_vods(posted_vods)
            if new_vods:
                new_vods.reverse()
                return new_vods
        elif response.status_code in [403, 400]:
            current_youtube_key_index = (current_youtube_key_index + 1) % len(YOUTUBE_API_KEYS)
        else:
            break
    return [], None

# === Background Tasks ===

@tasks.loop(minutes=720)
async def check_youtube_video_task():
    new_vods = await check_youtube_video()
    if isinstance(new_vods, list) and new_vods:
        guild = client.get_guild(GUILD_ID)
        channel = guild.get_channel(YOUTUBE_CHANNEL_NOTIFICATION_ID)
        role = guild.get_role(ROLE_ID)
        if channel:
            for vod in new_vods:
                if vod and isinstance(vod, dict):
                    await channel.send(f"{role.mention} New VOD: {vod['title']} - {vod['url']}")

@tasks.loop(minutes=1)
async def check_twitch_status_task():
    global last_status, message_id

    is_live, game, title = check_twitch_status()
    guild = client.get_guild(GUILD_ID)
    channel = guild.get_channel(CHANNEL_ID)
    role = guild.get_role(ROLE_ID)

    if is_live and not last_status:
        last_status = True
        if channel:
            message = await channel.send(
                f"{role.mention} üî¥ **{TWITCH_USERNAME} is now live!**\n"
                f"üéÆ Playing: {game}\n"
                f"üì∫ Title: {title}\n"
                f"https://twitch.tv/{TWITCH_USERNAME}"
            )
            message_id = message.id
            save_live_message_id(message_id)

    elif not is_live and last_status:
        last_status = False
        if channel and message_id:
            try:
                message = await channel.fetch_message(message_id)
                await message.delete()
                print("‚ùå Stream ended ‚Äî notification deleted.")
            except discord.NotFound:
                print("‚ö†Ô∏è Previous live message not found.")
            message_id = None
            save_live_message_id(None)

# === Bot Events & Slash Commands ===

@client.event
async def on_ready():
    global message_id
    print(f'Logged in as {client.user}')
    guild = discord.Object(id=GUILD_ID)
    try:
        await client.tree.sync(guild=guild)
        await client.tree.sync()
        print("‚úÖ Commands synced on startup.")
    except Exception as e:
        print(f"‚ùå Error syncing on startup: {e}")

    message_id = load_live_message_id()

    if not check_youtube_video_task.is_running():
        check_youtube_video_task.start()
    if not check_twitch_status_task.is_running():
        check_twitch_status_task.start()

@client.tree.command(name="ping", description="Check bot latency")
async def ping(interaction: discord.Interaction):
    latency = client.latency * 1000
    await interaction.response.send_message(f"Pong! üèì Latency: {latency:.2f}ms")

@client.tree.command(name="status", description="Check Twitch live status")
async def status(interaction: discord.Interaction):
    status_msg = "üî¥ Live" if last_status else "‚ö™ Offline"
    await interaction.response.send_message(f"Knuckleykong is currently: {status_msg}")

@client.tree.command(name="restart", description="Restart the bot")
async def restart(interaction: discord.Interaction):
    await interaction.response.send_message("‚ôªÔ∏è Restarting bot...")
    subprocess.Popen([sys.executable, __file__])
    await client.close()

# === Run Bot ===
client.run(TOKEN)
